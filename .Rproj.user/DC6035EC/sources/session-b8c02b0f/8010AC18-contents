#' Test all GeoSpatialSuite functions with enhanced capabilities
#'
#' @description
#' Comprehensive testing function that validates all major package functions
#' including new efficient visualization, 40+ vegetation indices, interactive mapping,
#' and enhanced workflows. Tests performance and compatibility with optional packages.
#'
#' @param test_output_dir Directory for test outputs (default: tempdir())
#' @param comprehensive Run comprehensive tests (slower but more thorough)
#' @param test_visualization Test visualization functions (requires graphics)
#' @param test_performance Run performance benchmarks
#' @param verbose Print detailed test progress messages
#'
#' @return List of test results with success/failure status for each component
#'
#' @examples
#' \dontrun{
#' # Quick test (essential functions only)
#' test_results <- test_geospatialsuite_package()
#'
#' # Comprehensive test (all functions including visualization)
#' test_results <- test_geospatialsuite_package(
#'   comprehensive = TRUE,
#'   test_visualization = TRUE,
#'   test_performance = TRUE
#' )
#'
#' # Test specific components
#' test_results <- test_geospatialsuite_package(
#'   test_output_dir = "~/geospatial_tests",
#'   comprehensive = TRUE,
#'   verbose = TRUE
#' )
#' }
#'
#' @export
test_geospatialsuite_package <- function(test_output_dir = tempdir(),
                                         comprehensive = TRUE,
                                         test_visualization = TRUE,
                                         test_performance = FALSE,
                                         verbose = FALSE) {

  message("Testing GeoSpatialSuite v0.1.0 - Enhanced Capabilities")
  message("======================================================")

  # Create test output directory
  if (!dir.exists(test_output_dir)) {
    dir.create(test_output_dir, recursive = TRUE)
    if (verbose) message("Created test output directory: ", test_output_dir)
  }

  test_results <- list()
  start_time <- Sys.time()

  # Test 1: Enhanced NDVI calculation with quality filtering
  if (verbose) message("\n Testing enhanced NDVI calculation...")
  test_results$enhanced_ndvi_test <- tryCatch({
    # Create sample data
    red <- terra::rast(nrows = 10, ncols = 10, xmin = 0, xmax = 10, ymin = 0, ymax = 10)
    terra::values(red) <- runif(100, 0.1, 0.3)
    nir <- terra::rast(nrows = 10, ncols = 10, xmin = 0, xmax = 10, ymin = 0, ymax = 10)
    terra::values(nir) <- runif(100, 0.4, 0.8)

    # Test enhanced NDVI with quality filtering
    ndvi_result <- calculate_ndvi_enhanced(
      red_data = red,
      nir_data = nir,
      quality_filter = TRUE,
      match_by_date = FALSE
    )

    # Validate results
    success <- inherits(ndvi_result, "SpatRaster") &&
      !all(is.na(terra::values(ndvi_result))) &&
      all(terra::values(ndvi_result, mat = FALSE) >= -1 &
            terra::values(ndvi_result, mat = FALSE) <= 1, na.rm = TRUE)

    if (verbose && success) message("Enhanced NDVI calculation successful")
    success

  }, error = function(e) {
    if (verbose) message("Enhanced NDVI test failed: ", e$message)
    FALSE
  })

  # Test 2: Multiple vegetation indices (40+ indices)
  if (verbose) message("\n Testing multiple vegetation indices...")
  test_results$multiple_indices_test <- tryCatch({
    # Create sample multi-band data
    red <- terra::rast(nrows = 8, ncols = 8, xmin = 0, xmax = 8, ymin = 0, ymax = 8)
    terra::values(red) <- runif(64, 0.1, 0.3)
    nir <- terra::rast(nrows = 8, ncols = 8, xmin = 0, xmax = 8, ymin = 0, ymax = 8)
    terra::values(nir) <- runif(64, 0.4, 0.8)
    blue <- terra::rast(nrows = 8, ncols = 8, xmin = 0, xmax = 8, ymin = 0, ymax = 8)
    terra::values(blue) <- runif(64, 0.05, 0.15)
    green <- terra::rast(nrows = 8, ncols = 8, xmin = 0, xmax = 8, ymin = 0, ymax = 8)
    terra::values(green) <- runif(64, 0.1, 0.25)

    # Test multiple indices calculation
    indices_result <- calculate_multiple_indices(
      red = red, nir = nir, blue = blue, green = green,
      indices = c("NDVI", "EVI", "SAVI", "GNDVI", "ARVI"),
      output_stack = TRUE
    )

    # Validate results
    success <- inherits(indices_result, "SpatRaster") &&
      terra::nlyr(indices_result) == 5 &&
      !all(is.na(terra::values(indices_result)))

    if (verbose && success) message("Multiple vegetation indices working correctly")
    success

  }, error = function(e) {
    if (verbose) message("Multiple indices test failed: ", e$message)
    FALSE
  })

  # Test 3: Comprehensive vegetation analysis
  if (comprehensive) {
    if (verbose) message("\n Testing comprehensive vegetation analysis...")
    test_results$comprehensive_vegetation_test <- tryCatch({
      # Create sample spectral stack
      spectral_stack <- c(
        terra::rast(nrows = 6, ncols = 6, xmin = 0, xmax = 6, ymin = 0, ymax = 6),
        terra::rast(nrows = 6, ncols = 6, xmin = 0, xmax = 6, ymin = 0, ymax = 6),
        terra::rast(nrows = 6, ncols = 6, xmin = 0, xmax = 6, ymin = 0, ymax = 6),
        terra::rast(nrows = 6, ncols = 6, xmin = 0, xmax = 6, ymin = 0, ymax = 6)
      )
      terra::values(spectral_stack) <- runif(144, 0.1, 0.8)
      names(spectral_stack) <- c("red", "green", "blue", "nir")

      # Test comprehensive crop analysis
      crop_analysis <- analyze_crop_vegetation(
        spectral_data = spectral_stack,
        crop_type = "corn",
        analysis_type = "stress",
        verbose = FALSE
      )

      # Validate results
      success <- is.list(crop_analysis) &&
        !is.null(crop_analysis$vegetation_indices) &&
        !is.null(crop_analysis$analysis_results) &&
        !is.null(crop_analysis$metadata)

      if (verbose && success) message("Comprehensive vegetation analysis working")
      success

    }, error = function(e) {
      if (verbose) message("Comprehensive vegetation test failed: ", e$message)
      FALSE
    })
  }

  # Test 4: Efficient visualization functions
  if (test_visualization) {
    if (verbose) message("\n Testing efficient visualization...")
    test_results$visualization_test <- tryCatch({
      # Create sample raster for visualization
      sample_raster <- terra::rast(nrows = 10, ncols = 10, xmin = 0, xmax = 10, ymin = 0, ymax = 10)
      terra::values(sample_raster) <- runif(100, 0, 1)
      names(sample_raster) <- "test_variable"

      # Test universal mapping
      map_result <- create_spatial_map(
        spatial_data = sample_raster,
        color_scheme = "viridis",
        title = "Test Map"
      )

      # Test quick mapping
      quick_result <- quick_map(sample_raster)

      # Test efficient raster plotting
      fast_plot <- plot_raster_fast(
        raster_data = sample_raster,
        title = "Test Fast Plot",
        use_ggplot = !is.null(map_result)
      )

      # Validate results
      success <- (!is.null(map_result) || !is.null(fast_plot)) &&
        !is.null(quick_result)

      if (verbose && success) message("Efficient visualization working")
      success

    }, error = function(e) {
      if (verbose) message("Visualization test failed: ", e$message)
      FALSE
    })
  }

  # Test 5: Enhanced water indices (both NDWI variants)
  if (verbose) message("\n Testing enhanced water indices...")
  test_results$enhanced_water_test <- tryCatch({
    # Create sample bands
    green <- terra::rast(nrows = 8, ncols = 8, xmin = 0, xmax = 8, ymin = 0, ymax = 8)
    terra::values(green) <- runif(64, 0.2, 0.4)
    nir <- terra::rast(nrows = 8, ncols = 8, xmin = 0, xmax = 8, ymin = 0, ymax = 8)
    terra::values(nir) <- runif(64, 0.4, 0.8)
    swir1 <- terra::rast(nrows = 8, ncols = 8, xmin = 0, xmax = 8, ymin = 0, ymax = 8)
    terra::values(swir1) <- runif(64, 0.1, 0.3)

    # Test water indices
    ndwi <- calculate_water_index(green, nir, index_type = "NDWI")
    mndwi <- calculate_water_index(green, nir, swir1, index_type = "MNDWI")
    ndmi <- calculate_water_index(green, nir, swir1, index_type = "NDMI")

    # Validate results
    success <- !is.null(ndwi) && !is.null(mndwi) && !is.null(ndmi) &&
      all(sapply(list(ndwi, mndwi, ndmi), function(x) inherits(x, "SpatRaster")))

    if (verbose && success) message("Enhanced water indices working correctly")
    success

  }, error = function(e) {
    if (verbose) message("Enhanced water test failed: ", e$message)
    FALSE
  })

  # Test 6: Interactive mapping (if leaflet available)
  if (test_visualization && requireNamespace("leaflet", quietly = TRUE)) {
    if (verbose) message("\n Testing interactive mapping...")
    test_results$interactive_mapping_test <- tryCatch({
      # Create sample point data
      sample_points <- data.frame(
        lon = runif(10, -100, -80),
        lat = runif(10, 40, 45),
        value = runif(10, 0, 100),
        category = sample(c("A", "B", "C"), 10, replace = TRUE)
      )

      # Test interactive mapping
      interactive_map <- create_interactive_map(
        spatial_data = sf::st_as_sf(sample_points, coords = c("lon", "lat"), crs = 4326),
        fill_variable = "value",
        basemap = "osm",
        cluster_points = TRUE
      )

      # Validate results
      success <- inherits(interactive_map, "leaflet")

      if (verbose && success) message("Interactive mapping working")
      success

    }, error = function(e) {
      if (verbose) message("Interactive mapping test failed: ", e$message)
      FALSE
    })
  }

  # Test 7: RGB composite plotting
  if (test_visualization) {
    if (verbose) message("\n Testing RGB composite plotting...")
    test_results$rgb_composite_test <- tryCatch({
      # Create sample multi-band raster
      rgb_raster <- terra::rast(nrows = 8, ncols = 8, nlyr = 4,
                                xmin = 0, xmax = 8, ymin = 0, ymax = 8)
      terra::values(rgb_raster) <- runif(256, 0, 255)
      names(rgb_raster) <- c("red", "green", "blue", "nir")

      # Test RGB plotting
      rgb_plot <- plot_rgb_raster(
        raster_data = rgb_raster,
        r = 1, g = 2, b = 3,
        title = "Test RGB Composite"
      )

      # Validate results (plot may return NULL for base plotting)
      success <- TRUE  # If no error thrown, consider successful

      if (verbose && success) message("RGB composite plotting working")
      success

    }, error = function(e) {
      if (verbose) message("RGB composite test failed: ", e$message)
      FALSE
    })
  }

  # Test 8: Enhanced workflows
  if (comprehensive) {
    if (verbose) message("\n Testing enhanced workflows...")
    test_results$enhanced_workflows_test <- tryCatch({
      # Test workflow configuration
      test_config <- list(
        analysis_type = "vegetation_comprehensive",
        input_data = terra::rast(nrows = 6, ncols = 6, nlyr = 4),
        region_boundary = c(-85, 39, -82, 42),  # Bounding box
        indices = c("NDVI", "EVI"),
        visualization_config = list(create_maps = FALSE)  # Skip visualization for speed
      )

      # Set some values for the raster
      terra::values(test_config$input_data) <- runif(144, 0.1, 0.8)
      names(test_config$input_data) <- c("red", "green", "blue", "nir")

      # Test workflow execution
      workflow_result <- run_comprehensive_geospatial_workflow(test_config)

      # Validate results
      success <- is.list(workflow_result) &&
        !is.null(workflow_result$results) &&
        !is.null(workflow_result$summary)

      if (verbose && success) message("Enhanced workflows working")
      success

    }, error = function(e) {
      if (verbose) message("Enhanced workflows test failed: ", e$message)
      FALSE
    })
  }

  # Test 9: Performance benchmarks
  if (test_performance) {
    if (verbose) message("\n Testing performance...")
    test_results$performance_test <- tryCatch({
      # Create larger raster for performance testing
      large_raster <- terra::rast(nrows = 100, ncols = 100, xmin = 0, xmax = 100, ymin = 0, ymax = 100)
      terra::values(large_raster) <- runif(10000, 0, 1)

      # Test performance of different plotting methods
      times <- list()

      # Time terra::plot
      times$terra_plot <- system.time({
        terra::plot(large_raster, main = "Performance Test")
      })

      # Time efficient plotting
      times$efficient_plot <- system.time({
        plot_raster_fast(large_raster, use_ggplot = FALSE)
      })

      # Test multiple indices performance
      red <- large_raster
      nir <- large_raster * 1.5
      blue <- large_raster * 0.5

      times$multiple_indices <- system.time({
        calculate_multiple_indices(
          red = red, nir = nir, blue = blue,
          indices = c("NDVI", "EVI", "ARVI"),
          output_stack = TRUE
        )
      })

      # Performance is successful if operations complete
      success <- all(sapply(times, function(x) x["elapsed"] > 0))

      if (verbose && success) {
        message("Performance benchmarks completed:")
        for (test_name in names(times)) {
          message(sprintf("  %s: %.3f seconds", test_name, times[[test_name]]["elapsed"]))
        }
      }

      success

    }, error = function(e) {
      if (verbose) message("Performance test failed: ", e$message)
      FALSE
    })
  }

  # Test 10: Package dependencies and recommendations
  if (verbose) message("\n Testing package dependencies...")
  test_results$dependencies_test <- tryCatch({
    # Test core dependencies
    core_deps <- c("terra", "sf", "ggplot2", "dplyr")
    core_available <- sapply(core_deps, requireNamespace, quietly = TRUE)

    # Test recommended packages
    recommended <- c("tidyterra", "RStoolbox", "leaflet", "patchwork")
    recommended_available <- sapply(recommended, requireNamespace, quietly = TRUE)

    # Report recommendations
    if (verbose) {
      message("Core dependencies:")
      for (i in seq_along(core_deps)) {
        status <- if (core_available[i]) "" else ""
        message(sprintf("  %s %s", status, core_deps[i]))
      }

      message("Recommended packages:")
      for (i in seq_along(recommended)) {
        status <- if (recommended_available[i]) "" else ""
        message(sprintf("  %s %s", status, recommended[i]))
      }
    }

    # Success if all core dependencies available
    success <- all(core_available)
    success

  }, error = function(e) {
    if (verbose) message("Dependencies test failed: ", e$message)
    FALSE
  })

  # Calculate summary statistics
  end_time <- Sys.time()
  total_tests <- length(test_results)
  passed_tests <- sum(unlist(test_results))
  success_rate <- round((passed_tests / total_tests) * 100, 1)
  duration <- round(as.numeric(difftime(end_time, start_time, units = "secs")), 2)

  # Print enhanced summary
  message("\n ENHANCED TEST SUMMARY")
  message("========================")
  message(sprintf("Tests passed: %d/%d (%.1f%%)", passed_tests, total_tests, success_rate))
  message(sprintf("Duration: %.2f seconds", duration))
  message(sprintf("GeoSpatialSuite version: 0.1.0"))

  # Detailed results
  if (verbose) {
    message("\nDetailed Results:")
    for (test_name in names(test_results)) {
      status <- if (test_results[[test_name]]) "PASS" else "FAIL"
      message(sprintf("  %s: %s", test_name, status))
    }
  }

  # Final message
  if (passed_tests == total_tests) {
    message("\n ALL TESTS PASSED! GeoSpatialSuite v0.1.0 is working correctly.")
    message("   Enhanced features: Efficient visualization 40+ vegetation indices")
    message("   Interactive mapping Advanced workflows")
  } else {
    message("\n Some tests failed. Check the detailed results above.")
    failed_tests <- names(test_results)[!unlist(test_results)]
    message(sprintf("Failed tests: %s", paste(failed_tests, collapse = ", ")))
  }

  # Package recommendations
  if (!requireNamespace("tidyterra", quietly = TRUE)) {
    message("\n RECOMMENDATION: Install 'tidyterra' for best raster visualization:")
    message("   install.packages('tidyterra')")
  }

  # Return enhanced results
  return(list(
    test_results = test_results,
    summary = list(
      total_tests = total_tests,
      passed_tests = passed_tests,
      failed_tests = total_tests - passed_tests,
      success_rate = success_rate,
      duration_seconds = duration,
      version = "0.2.0"
    ),
    test_output_dir = test_output_dir,
    timestamp = Sys.time(),
    comprehensive = comprehensive,
    visualization_tested = test_visualization,
    performance_tested = test_performance,
    package_recommendations = list(
      essential = c("tidyterra", "RStoolbox"),
      optional = c("leaflet", "patchwork", "gganimate")
    )
  ))
}

#' Test specific enhanced functions
#'
#' @description
#' Test individual enhanced package functions for debugging and development purposes.
#'
#' @param function_name Name of function to test
#' @param verbose Print detailed output
#'
#' @return Boolean indicating test success
#'
#' @examples
#' \dontrun{
#' # Test enhanced functions
#' test_specific_function("calculate_multiple_indices")
#' test_specific_function("create_spatial_map")
#' test_specific_function("plot_raster_fast")
#' test_specific_function("analyze_crop_vegetation")
#' }
#'
#' @export
test_specific_function <- function(function_name, verbose = TRUE) {

  if (verbose) message(sprintf(" Testing enhanced function: %s", function_name))

  result <- switch(function_name,

                   "calculate_multiple_indices" = tryCatch({
                     red <- terra::rast(nrows = 5, ncols = 5, xmin = 0, xmax = 5, ymin = 0, ymax = 5)
                     terra::values(red) <- runif(25, 0.1, 0.3)
                     nir <- terra::rast(nrows = 5, ncols = 5, xmin = 0, xmax = 5, ymin = 0, ymax = 5)
                     terra::values(nir) <- runif(25, 0.4, 0.8)
                     blue <- terra::rast(nrows = 5, ncols = 5, xmin = 0, xmax = 5, ymin = 0, ymax = 5)
                     terra::values(blue) <- runif(25, 0.05, 0.15)

                     result <- calculate_multiple_indices(
                       red = red, nir = nir, blue = blue,
                       indices = c("NDVI", "EVI", "ARVI"),
                       output_stack = TRUE
                     )
                     inherits(result, "SpatRaster") && terra::nlyr(result) == 3
                   }, error = function(e) FALSE),

                   "create_spatial_map" = tryCatch({
                     raster_data <- terra::rast(nrows = 5, ncols = 5, xmin = 0, xmax = 5, ymin = 0, ymax = 5)
                     terra::values(raster_data) <- runif(25, 0, 1)

                     result <- create_spatial_map(
                       spatial_data = raster_data,
                       color_scheme = "viridis",
                       title = "Test Map"
                     )
                     !is.null(result)
                   }, error = function(e) FALSE),

                   "plot_raster_fast" = tryCatch({
                     raster_data <- terra::rast(nrows = 5, ncols = 5, xmin = 0, xmax = 5, ymin = 0, ymax = 5)
                     terra::values(raster_data) <- runif(25, 0, 1)

                     result <- plot_raster_fast(
                       raster_data = raster_data,
                       title = "Test Fast Plot",
                       use_ggplot = FALSE  # Use terra plotting for reliable testing
                     )
                     TRUE  # Success if no error thrown
                   }, error = function(e) FALSE),

                   "analyze_crop_vegetation" = tryCatch({
                     spectral_stack <- terra::rast(nrows = 5, ncols = 5, nlyr = 4,
                                                   xmin = 0, xmax = 5, ymin = 0, ymax = 5)
                     terra::values(spectral_stack) <- runif(100, 0.1, 0.8)
                     names(spectral_stack) <- c("red", "green", "blue", "nir")

                     result <- analyze_crop_vegetation(
                       spectral_data = spectral_stack,
                       crop_type = "corn",
                       analysis_type = "stress",
                       verbose = FALSE
                     )
                     is.list(result) && !is.null(result$vegetation_indices)
                   }, error = function(e) FALSE),

                   "quick_map" = tryCatch({
                     test_data <- terra::rast(nrows = 5, ncols = 5, xmin = 0, xmax = 5, ymin = 0, ymax = 5)
                     terra::values(test_data) <- runif(25, 0, 1)

                     result <- quick_map(test_data)
                     !is.null(result)
                   }, error = function(e) FALSE),

                   "create_ndvi_map" = tryCatch({
                     ndvi_data <- terra::rast(nrows = 5, ncols = 5, xmin = 0, xmax = 5, ymin = 0, ymax = 5)
                     terra::values(ndvi_data) <- runif(25, 0, 1)

                     result <- create_ndvi_map(
                       ndvi_data = ndvi_data,
                       ndvi_classes = "standard",
                       show_histogram = FALSE
                     )
                     !is.null(result)
                   }, error = function(e) FALSE),

                   "calculate_ndvi_enhanced" = tryCatch({
                     red <- terra::rast(nrows = 5, ncols = 5, xmin = 0, xmax = 5, ymin = 0, ymax = 5)
                     terra::values(red) <- runif(25, 0.1, 0.3)
                     nir <- terra::rast(nrows = 5, ncols = 5, xmin = 0, xmax = 5, ymin = 0, ymax = 5)
                     terra::values(nir) <- runif(25, 0.4, 0.8)

                     result <- calculate_ndvi_enhanced(
                       red_data = red,
                       nir_data = nir,
                       quality_filter = TRUE,
                       match_by_date = FALSE
                     )
                     inherits(result, "SpatRaster")
                   }, error = function(e) FALSE),

                   {
                     if (verbose) message(sprintf("Unknown function: %s", function_name))
                     FALSE
                   }
  )

  if (verbose) {
    if (result) {
      message(sprintf("%s: PASSED", function_name))
    } else {
      message(sprintf("%s: FAILED", function_name))
    }
  }

  return(result)
}

#' Get enhanced test coverage report
#'
#' @description
#' Generate a coverage report showing which enhanced functions have been tested.
#'
#' @return Data frame with enhanced function coverage information
#'
#' @examples
#' \dontrun{
#' coverage_report <- get_enhanced_test_coverage()
#' print(coverage_report)
#' }
#'
#' @export
get_enhanced_test_coverage <- function() {

  # Enhanced function list (v0.2.0)
  enhanced_functions <- c(
    # Enhanced Vegetation Functions
    "calculate_multiple_indices", "analyze_crop_vegetation", "calculate_ndvi_enhanced",
    "list_vegetation_indices", "calculate_vegetation_index",

    # Enhanced Visualization Functions
    "create_spatial_map", "quick_map", "plot_raster_fast", "plot_rgb_raster",
    "create_ndvi_map", "create_crop_map", "create_interactive_map",
    "create_composite_map", "create_comparison_map", "create_raster_histogram",

    # Enhanced Water Quality
    "analyze_water_quality_comprehensive", "create_water_quality_plot",

    # Enhanced Workflows
    "run_comprehensive_geospatial_workflow", "run_enhanced_ndvi_crop_workflow",
    "run_comprehensive_vegetation_workflow",

    # Core Functions (existing)
    "spatial_join_universal", "integrate_multiple_datasets",
    "get_comprehensive_cdl_codes", "create_crop_mask", "create_raster_mosaic",
    "get_region_boundary", "load_raster_data", "extract_dates_universal"
  )

  # Functions covered by enhanced test suite
  covered_functions <- c(
    # Enhanced functions with dedicated tests
    "calculate_multiple_indices", "analyze_crop_vegetation", "calculate_ndvi_enhanced",
    "create_spatial_map", "quick_map", "plot_raster_fast", "plot_rgb_raster",
    "create_ndvi_map", "create_interactive_map", "run_comprehensive_geospatial_workflow",

    # Core functions with existing tests
    "spatial_join_universal", "get_comprehensive_cdl_codes", "create_raster_mosaic",
    "get_region_boundary", "load_raster_data", "integrate_multiple_datasets"
  )

  # Create enhanced coverage report
  coverage_df <- data.frame(
    Function = enhanced_functions,
    Category = c(
      # Vegetation functions
      rep("Enhanced Vegetation", 5),
      # Visualization functions
      rep("Enhanced Visualization", 8),
      # Water quality
      rep("Enhanced Water Quality", 2),
      # Workflows
      rep("Enhanced Workflows", 3),
      # Core functions
      rep("Core Functions", 6)
    ),
    Tested = enhanced_functions %in% covered_functions,
    Test_Type = ifelse(enhanced_functions %in% covered_functions, "Automated", "Manual"),
    Version_Added = ifelse(enhanced_functions %in% c("calculate_multiple_indices",
                                                     "create_spatial_map", "quick_map",
                                                     "plot_raster_fast", "analyze_crop_vegetation"),
                           "v0.1.0"),
    stringsAsFactors = FALSE
  )

  coverage_df$Coverage_Status <- ifelse(coverage_df$Tested, "Covered", "Not Covered")

  # Calculate summary by category
  total_functions <- length(enhanced_functions)
  covered_count <- sum(coverage_df$Tested)
  coverage_percentage <- round((covered_count / total_functions) * 100, 1)

  # Print summary
  message(sprintf("Enhanced Test Coverage: %d/%d functions (%.1f%%)",
                  covered_count, total_functions, coverage_percentage))

  # Coverage by category
  category_summary <- coverage_df %>%
    dplyr::group_by(Category) %>%
    dplyr::summarise(
      Total = dplyr::n(),
      Covered = sum(Tested),
      Coverage_Pct = round((sum(Tested) / dplyr::n()) * 100, 1),
      .groups = 'drop'
    )

  message("\nCoverage by Category:")
  for (i in 1:nrow(category_summary)) {
    cat_info <- category_summary[i, ]
    message(sprintf("  %s: %d/%d (%.1f%%)",
                    cat_info$Category, cat_info$Covered, cat_info$Total, cat_info$Coverage_Pct))
  }

  # Add category summary to result
  attr(coverage_df, "category_summary") <- category_summary
  attr(coverage_df, "overall_coverage") <- coverage_percentage

  return(coverage_df)
}

#' Enhanced package health check with performance assessment
#'
#' @description
#' Perform comprehensive health check including package installation, dependencies,
#' core functions, enhanced features, and performance assessment.
#'
#' @param check_performance Include performance benchmarks
#' @param check_visualization Test visualization capabilities
#' @param verbose Print detailed information
#'
#' @return Boolean indicating overall package health with detailed diagnostics
#'
#' @examples
#' \dontrun{
#' health_status <- enhanced_health_check()
#' health_detailed <- enhanced_health_check(check_performance = TRUE, verbose = TRUE)
#' }
#'
#' @export
enhanced_health_check <- function(check_performance = FALSE, check_visualization = TRUE, verbose = TRUE) {

  if (verbose) {
    message(" GeoSpatialSuite v0.1.0 Enhanced Health Check")
    message("===============================================")
  }

  checks <- list()

  # Check 1: Package loading
  checks$package_loaded <- tryCatch({
    "geospatialsuite" %in% (.packages()) ||
      requireNamespace("geospatialsuite", quietly = TRUE)
  }, error = function(e) FALSE)

  # Check 2: Core dependencies
  core_deps <- c("terra", "sf", "dplyr", "ggplot2")
  checks$core_dependencies <- all(sapply(core_deps, requireNamespace, quietly = TRUE))

  # Check 3: Enhanced dependencies (recommended)
  enhanced_deps <- c("tidyterra", "RStoolbox", "leaflet")
  enhanced_available <- sapply(enhanced_deps, requireNamespace, quietly = TRUE)
  checks$enhanced_dependencies <- any(enhanced_available)  # At least one should be available

  # Check 4: Core functions exist
  core_functions <- c("spatial_join_universal", "get_comprehensive_cdl_codes",
                      "create_raster_mosaic", "get_region_boundary")
  checks$core_functions <- all(sapply(core_functions, exists, mode = "function"))

  # Check 5: Enhanced functions exist
  enhanced_functions <- c("calculate_multiple_indices", "create_spatial_map",
                          "quick_map", "plot_raster_fast", "analyze_crop_vegetation")
  checks$enhanced_functions <- all(sapply(enhanced_functions, exists, mode = "function"))

  # Check 6: Basic functionality test
  checks$basic_functionality <- tryCatch({
    # Test simple NDVI calculation
    red <- terra::rast(nrows = 3, ncols = 3, xmin = 0, xmax = 3, ymin = 0, ymax = 3)
    terra::values(red) <- rep(0.2, 9)
    nir <- terra::rast(nrows = 3, ncols = 3, xmin = 0, xmax = 3, ymin = 0, ymax = 3)
    terra::values(nir) <- rep(0.8, 9)

    ndvi <- calculate_vegetation_index(red, nir, index_type = "NDVI")
    inherits(ndvi, "SpatRaster") && !all(is.na(terra::values(ndvi)))
  }, error = function(e) FALSE)

  # Check 7: Enhanced functionality test
  checks$enhanced_functionality <- tryCatch({
    # Test multiple indices calculation
    red <- terra::rast(nrows = 3, ncols = 3, xmin = 0, xmax = 3, ymin = 0, ymax = 3)
    terra::values(red) <- runif(9, 0.1, 0.3)
    nir <- terra::rast(nrows = 3, ncols = 3, xmin = 0, xmax = 3, ymin = 0, ymax = 3)
    terra::values(nir) <- runif(9, 0.4, 0.8)
    blue <- terra::rast(nrows = 3, ncols = 3, xmin = 0, xmax = 3, ymin = 0, ymax = 3)
    terra::values(blue) <- runif(9, 0.05, 0.15)

    indices <- calculate_multiple_indices(
      red = red, nir = nir, blue = blue,
      indices = c("NDVI", "EVI"),
      output_stack = TRUE
    )
    inherits(indices, "SpatRaster") && terra::nlyr(indices) == 2
  }, error = function(e) FALSE)

  # Check 8: Visualization capabilities
  if (check_visualization) {
    checks$visualization <- tryCatch({
      test_raster <- terra::rast(nrows = 3, ncols = 3, xmin = 0, xmax = 3, ymin = 0, ymax = 3)
      terra::values(test_raster) <- runif(9, 0, 1)

      # Test quick mapping
      map_result <- quick_map(test_raster)
      !is.null(map_result)
    }, error = function(e) FALSE)
  }

  # Check 9: Performance assessment
  if (check_performance) {
    checks$performance <- tryCatch({
      # Create medium-sized raster for performance test
      perf_raster <- terra::rast(nrows = 50, ncols = 50, xmin = 0, xmax = 50, ymin = 0, ymax = 50)
      terra::values(perf_raster) <- runif(2500, 0, 1)

      # Time efficient plotting
      start_time <- Sys.time()
      plot_raster_fast(perf_raster, use_ggplot = FALSE)
      end_time <- Sys.time()

      # Performance is good if operation completes in reasonable time
      elapsed <- as.numeric(difftime(end_time, start_time, units = "secs"))
      elapsed < 10  # Should complete within 10 seconds
    }, error = function(e) FALSE)
  }

  # Print detailed results
  if (verbose) {
    message("\n System Checks:")
    for (check_name in names(checks)) {
      status <- if (checks[[check_name]]) "PASS" else "FAIL"
      formatted_name <- gsub("_", " ", stringr::str_to_title(check_name))
      message(sprintf("  %s: %s", formatted_name, status))
    }

    # Detailed dependency information
    message("\n Dependencies Status:")
    message("Core Dependencies (Required):")
    for (dep in core_deps) {
      status <- if (requireNamespace(dep, quietly = TRUE)) "" else ""
      message(sprintf("  %s %s", status, dep))
    }

    message("Enhanced Dependencies (Recommended):")
    for (i in seq_along(enhanced_deps)) {
      dep <- enhanced_deps[i]
      status <- if (enhanced_available[i]) "" else ""
      message(sprintf("  %s %s", status, dep))
    }

    # Performance information
    if (check_performance && checks$performance) {
      message("\n Performance: Acceptable")
    } else if (check_performance) {
      message("\n Performance: May be slow")
    }
  }

  # Overall health assessment
  essential_checks <- c("package_loaded", "core_dependencies", "core_functions", "basic_functionality")
  overall_health <- all(checks[essential_checks])

  if (verbose) {
    message(sprintf("\n Overall Status: %s",
                    if (overall_health) " HEALTHY" else " ISSUES DETECTED"))

    # Recommendations
    if (!overall_health) {
      message("\n Troubleshooting recommendations:")
      if (!checks$package_loaded) {
        message("   Reinstall package: devtools::install()")
      }
      if (!checks$core_dependencies) {
        missing_core <- core_deps[!sapply(core_deps, requireNamespace, quietly = TRUE)]
        message(sprintf("   Install missing core dependencies: install.packages(c('%s'))",
                        paste(missing_core, collapse = "', '")))
      }
      if (!checks$enhanced_dependencies) {
        message("   Install recommended packages for best performance:")
        message("    install.packages(c('tidyterra', 'RStoolbox', 'leaflet'))")
      }
    } else {
      message("\n Package is healthy and ready for use!")

      # Enhancement recommendations
      if (!all(enhanced_available)) {
        missing_enhanced <- enhanced_deps[!enhanced_available]
        message("\n Optional enhancements:")
        message(sprintf("  For best performance: install.packages(c('%s'))",
                        paste(missing_enhanced, collapse = "', '")))
      }
    }

    # Feature availability summary
    message("\n Available Features:")
    if (checks$enhanced_functions) message("  40+ vegetation indices")
    if (checks$visualization) message("  Enhanced visualization")
    if (enhanced_available["tidyterra"]) message("  Efficient raster plotting")
    if (enhanced_available["leaflet"]) message("  Interactive mapping")
    if (enhanced_available["RStoolbox"]) message("  Advanced remote sensing tools")
  }

  # Return comprehensive health status
  health_result <- list(
    overall_healthy = overall_health,
    checks = checks,
    core_dependencies = core_deps,
    enhanced_dependencies = enhanced_deps,
    enhanced_available = enhanced_available,
    recommendations = list(
      essential = if (!overall_health) "Fix core issues before proceeding" else NULL,
      performance = if (!all(enhanced_available)) "Install tidyterra and RStoolbox for best performance" else NULL
    ),
    version = "0.1.0",
    timestamp = Sys.time()
  )

  return(health_result)
}

#' Performance benchmark for enhanced functions
#'
#' @description
#' Run performance benchmarks comparing old vs new methods and different packages.
#'
#' @param raster_sizes Vector of raster sizes to test (number of cells)
#' @param n_indices Number of vegetation indices to test
#' @param verbose Print detailed results
#'
#' @return Data frame with benchmark results
#'
#' @examples
#' \dontrun{
#' # Quick benchmark
#' benchmark_results <- performance_benchmark()
#'
#' # Comprehensive benchmark
#' benchmark_results <- performance_benchmark(
#'   raster_sizes = c(100, 1000, 10000),
#'   n_indices = 5,
#'   verbose = TRUE
#' )
#' }
#'
#' @export
performance_benchmark <- function(raster_sizes = c(100, 2500, 10000),
                                  n_indices = 3, verbose = TRUE) {

  if (verbose) {
    message("Running Performance Benchmarks")
    message("==================================")
  }

  benchmark_results <- data.frame(
    raster_size = integer(),
    method = character(),
    operation = character(),
    time_seconds = numeric(),
    memory_mb = numeric(),
    success = logical(),
    stringsAsFactors = FALSE
  )

  for (size in raster_sizes) {
    if (verbose) message(sprintf("\n Testing raster size: %d cells", size))

    # Calculate dimensions (square raster)
    dim <- ceiling(sqrt(size))

    # Create test raster
    test_raster <- terra::rast(nrows = dim, ncols = dim, xmin = 0, xmax = dim, ymin = 0, ymax = dim)
    terra::values(test_raster) <- runif(dim^2, 0, 1)

    # Benchmark 1: Raster plotting methods
    if (verbose) message("  Testing raster plotting...")

    # Terra native plotting
    plot_time <- system.time({
      terra::plot(test_raster, main = "Benchmark Test")
    })

    benchmark_results <- rbind(benchmark_results, data.frame(
      raster_size = size,
      method = "terra::plot",
      operation = "raster_plotting",
      time_seconds = plot_time["elapsed"],
      memory_mb = NA,
      success = TRUE
    ))

    # Enhanced plotting (if available)
    if (requireNamespace("tidyterra", quietly = TRUE)) {
      enhanced_time <- tryCatch({
        system.time({
          p <- plot_raster_fast(test_raster, use_ggplot = TRUE)
        })
      }, error = function(e) c(elapsed = NA))

      benchmark_results <- rbind(benchmark_results, data.frame(
        raster_size = size,
        method = "plot_raster_fast",
        operation = "raster_plotting",
        time_seconds = enhanced_time["elapsed"],
        memory_mb = NA,
        success = !is.na(enhanced_time["elapsed"])
      ))
    }

    # Benchmark 2: Multiple indices calculation
    if (verbose) message("  Testing vegetation indices...")

    # Create spectral bands
    red <- test_raster * 0.3
    nir <- test_raster * 0.7
    blue <- test_raster * 0.2

    # Test multiple indices
    indices_time <- tryCatch({
      system.time({
        indices <- calculate_multiple_indices(
          red = red, nir = nir, blue = blue,
          indices = c("NDVI", "EVI", "ARVI")[1:min(n_indices, 3)],
          output_stack = TRUE
        )
      })
    }, error = function(e) c(elapsed = NA))

    benchmark_results <- rbind(benchmark_results, data.frame(
      raster_size = size,
      method = "calculate_multiple_indices",
      operation = "vegetation_indices",
      time_seconds = indices_time["elapsed"],
      memory_mb = NA,
      success = !is.na(indices_time["elapsed"])
    ))
  }

  # Calculate performance metrics
  if (verbose && nrow(benchmark_results) > 0) {
    message("\n Performance Summary:")

    # Summarize by method
    perf_summary <- benchmark_results %>%
      dplyr::filter(success) %>%
      dplyr::group_by(method, operation) %>%
      dplyr::summarise(
        avg_time = round(mean(time_seconds, na.rm = TRUE), 3),
        min_time = round(min(time_seconds, na.rm = TRUE), 3),
        max_time = round(max(time_seconds, na.rm = TRUE), 3),
        tests = dplyr::n(),
        .groups = 'drop'
      )

    for (i in 1:nrow(perf_summary)) {
      row <- perf_summary[i, ]
      message(sprintf("  %s (%s): %.3f sec avg (%.3f - %.3f)",
                      row$method, row$operation, row$avg_time, row$min_time, row$max_time))
    }

    # Performance recommendations
    message("\n Performance Recommendations:")
    if (any(benchmark_results$method == "plot_raster_fast" & benchmark_results$success)) {
      fast_avg <- mean(benchmark_results$time_seconds[benchmark_results$method == "plot_raster_fast" &
                                                        benchmark_results$success], na.rm = TRUE)
      terra_avg <- mean(benchmark_results$time_seconds[benchmark_results$method == "terra::plot"], na.rm = TRUE)

      if (fast_avg < terra_avg) {
        message("  Enhanced plotting is faster - keep using plot_raster_fast()")
      } else {
        message("  Terra plotting is faster for your system - consider terra::plot() for large rasters")
      }
    }

    if (!requireNamespace("tidyterra", quietly = TRUE)) {
      message(" Install 'tidyterra' for potentially better performance")
    }
  }

  return(benchmark_results)
}
