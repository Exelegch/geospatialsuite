---
title: "Getting Started with GeoSpatialSuite"
output: rmarkdown::html_vignette
vignette: >
  %\VignetteIndexEntry{getting-started}
  %\VignetteEngine{knitr::rmarkdown}
  %\VignetteEncoding{UTF-8}
---



```{r, include = FALSE}
knitr::opts_chunk$set(
  collapse = TRUE,
  comment = "#>",
  eval = FALSE,  # Set to TRUE when you have example data
  warning = FALSE,
  message = FALSE
)
```

```{r setup}
library(GeoSpatialSuite)
```

# Introduction

GeoSpatialSuite is a comprehensive R package for geospatial analysis that works with **any region** and **any type of spatial data**. Whether you're working with agricultural data, environmental monitoring, water quality assessment, or land use analysis, GeoSpatialSuite provides robust, universal functions that handle the complexity of spatial data processing.

## Key Features

- **Universal Region Support**: Work with US states, countries, CONUS, counties, or custom boundaries
- **Vegetation Indices**: NDVI, EVI, SAVI, GNDVI, ARVI, and many more
- **Water Quality Analysis**: Both NDWI variants (McFeeters and Xu), water quality mapping
- **Universal Spatial Joins**: Works with ANY raster-vector combination automatically
- **Dynamic CDL Crop Analysis**: Comprehensive crop codes and categories
- **Robust Error Handling**: Intelligent input validation and helpful error messages
- **Temporal Analysis**: Trend detection, change analysis, seasonal patterns

# Quick Start Guide

## 1. Basic NDVI Calculation

```{r ndvi-basic}
# Calculate NDVI from red and NIR bands
# Works with file paths, directories, or raster objects
ndvi_result <- calculate_vegetation_index(
  red = "path/to/red_band.tif",
  nir = "path/to/nir_band.tif", 
  index_type = "NDVI"
)

# Alternative: Calculate from directories with date matching
ndvi_timeseries <- calculate_ndvi(
  red_data = "red_bands/",
  nir_data = "nir_bands/",
  match_by_date = TRUE
)
```

## 2. Universal Spatial Join

The spatial join function works with **any combination** of vector and raster data:

```{r spatial-join}
# Join study sites with NDVI data
result <- spatial_join_universal(
  vector_data = "study_sites.csv",
  raster_data = "ndvi_time_series/",
  method = "buffer",
  buffer_size = 1000
)

# Works with soil data too!
soil_result <- spatial_join_universal(
  vector_data = farm_fields,
  raster_data = "soil_properties/",
  method = "simple"
)

# Or climate data
climate_result <- spatial_join_universal(
  vector_data = weather_stations,
  raster_data = c("temp.tif", "precip.tif", "humidity.tif"),
  method = "bilinear"
)
```

## 3. Water Quality Analysis

```{r water-quality}
# Calculate water indices
ndwi_original <- calculate_water_index(
  green = green_band,
  nir = nir_band,
  index_type = "NDWI"
)

ndwi_modified <- calculate_water_index(
  green = green_band,
  nir = nir_band,
  swir1 = swir1_band,
  index_type = "MNDWI"
)

# Comprehensive water quality analysis
water_analysis <- analyze_water_quality_comprehensive(
  water_data = "ohio_water_stations.csv",
  variable = "nitrate_nitrite", 
  region_boundary = "Ohio",
  thresholds = list(
    Normal = c(0, 4),
    High = c(4, 7),
    Warning = c(7, 10),
    Toxic = c(10, Inf)
  )
)
```

## 4. Crop Analysis with CDL Data

```{r crop-analysis}
# Get crop codes for different categories
corn_codes <- get_comprehensive_cdl_codes("corn")
grain_codes <- get_comprehensive_cdl_codes("grains") 
all_codes <- get_comprehensive_cdl_codes("all")

# Create crop mask
corn_mask <- create_crop_mask(
  cdl_data = "cdl_2023.tif",
  crop_codes = "corn",
  region_boundary = "Iowa"
)

# Dynamic crop analysis
soybean_analysis <- analyze_cdl_crops_dynamic(
  cdl_data = "cdl_2023.tif",
  crop_selection = "soybeans", 
  region_boundary = "Iowa",
  analysis_type = "area"
)
```

## 5. Region Boundaries

GeoSpatialSuite works with any geographic region:

```{r regions}
# US States
ohio_boundary <- get_region_boundary("Ohio")
california_boundary <- get_region_boundary("California")

# Countries
nigeria_boundary <- get_region_boundary("Nigeria")
brazil_boundary <- get_region_boundary("Brazil")

# CONUS
conus_boundary <- get_region_boundary("CONUS")

# Counties
franklin_county <- get_region_boundary("Ohio:Franklin")

# Custom bounding box
custom_area <- get_region_boundary(c(-84.5, 39.0, -82.0, 41.0))
```

# Error Handling and Robustness

GeoSpatialSuite includes comprehensive error handling:

```{r error-handling}
# The package provides helpful error messages
try({
  ndvi <- calculate_vegetation_index(
    red = "nonexistent.tif",
    nir = "also_missing.tif"
  )
})
# Error: File or directory 'nonexistent.tif' does not exist

# Automatic data alignment
try({
  result <- spatial_join_universal(
    vector_data = points_data,
    raster_data = different_crs_raster
  )
})
# Message: Reprojecting vector data to match raster CRS...
```

# Working with Any Data Type

The universal functions work with any type of spatial data:

```{r universal-example}
# Environmental data
env_result <- spatial_join_universal(
  vector_data = monitoring_sites,
  raster_data = list(
    temperature = "temp_raster.tif",
    precipitation = "precip_raster.tif", 
    elevation = "dem.tif",
    soil_ph = "soil_ph.tif"
  )
)

# Agricultural data
ag_result <- spatial_join_universal(
  vector_data = field_boundaries,
  raster_data = c("ndvi.tif", "soil_nitrogen.tif", "yield_map.tif")
)

# Urban analysis
urban_result <- spatial_join_universal(
  vector_data = "city_districts.shp",
  raster_data = "land_surface_temperature/"
)
```

# Next Steps

- See the **Advanced Examples** vignette for complex workflows
- Check the **Spatial Analysis Workflows** vignette for complete analysis pipelines
- Use `test_geospatialsuite_package()` to test all functions with sample data
- Visit the function documentation for detailed parameter descriptions

# Getting Help

```{r help}
# Get help on any function
?calculate_vegetation_index
?spatial_join_universal
?analyze_water_quality_comprehensive

# Test the package
test_results <- test_geospatialsuite_package()

# List available vegetation indices
available_indices <- list_vegetation_indices()
print(available_indices)

# List available water indices  
water_indices <- list_water_indices()
print(water_indices)
```

GeoSpatialSuite is designed to be **universal**, **dynamic**, and **collaborative** - making geospatial analysis accessible for any region and any type of spatial data!
