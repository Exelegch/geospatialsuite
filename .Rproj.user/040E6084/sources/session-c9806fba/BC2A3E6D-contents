---
title: "Comprehensive Geospatial Workflows"
author: "GeoSpatialSuite Development Team"
output: rmarkdown::html_vignette
vignette: >
  %\VignetteIndexEntry{Comprehensive Geospatial Workflows}
  %\VignetteEngine{knitr::rmarkdown}
  %\VignetteEncoding{UTF-8}
---

```{r setup, include = FALSE}
knitr::opts_chunk$set(
  collapse = TRUE,
  comment = "#>",
  fig.width = 8,
  fig.height = 6,
  warning = FALSE,
  message = FALSE,
  eval = FALSE
)
```

# Comprehensive Geospatial Workflows

GeoSpatialSuite provides **end-to-end workflow solutions** for common geospatial analysis tasks, combining multiple analysis steps into streamlined, reproducible workflows.

## Loading the Package

```{r}
library(geospatialsuite)
```

## Workflow Philosophy

The workflow system in GeoSpatialSuite follows these principles:

1. **Configuration-driven**: Define analysis parameters in structured lists
2. **Modular**: Each workflow combines multiple analysis components
3. **Reproducible**: Save and reuse configurations
4. **Comprehensive**: Include data processing, analysis, and visualization
5. **Flexible**: Support for various data types and regions

## Main Workflow Function

All workflows are executed through the main function:

```{r}
results <- run_comprehensive_geospatial_workflow(analysis_config)
```

## Available Workflow Types

### 1. NDVI Crop Analysis Workflow

Complete NDVI analysis with crop masking and visualization:

```{r}
# Configure NDVI crop analysis
ndvi_config <- list(
  analysis_type = "ndvi_crop_analysis",
  input_data = list(
    red = "satellite_data/red_bands/",
    nir = "satellite_data/nir_bands/"
  ),
  region_boundary = "Iowa",
  cdl_data = "crop_data/cdl_2023.tif",
  crop_codes = get_comprehensive_cdl_codes("corn"),
  quality_filter = TRUE,
  temporal_smoothing = TRUE,
  visualization_config = list(
    create_maps = TRUE,
    interactive = TRUE,
    animation = TRUE,
    ndvi_classes = "standard",
    comparison_maps = TRUE
  ),
  output_folder = "results/corn_ndvi_analysis/"
)

# Execute workflow
corn_ndvi_results <- run_comprehensive_geospatial_workflow(ndvi_config)
```

### 2. Comprehensive Vegetation Analysis Workflow

Multi-index vegetation analysis with crop-specific insights:

```{r}
# Configure comprehensive vegetation analysis
vegetation_config <- list(
  analysis_type = "vegetation_comprehensive",
  input_data = "satellite_data/sentinel2_stack.tif",
  region_boundary = "Ohio",
  indices = c("NDVI", "EVI", "SAVI", "PRI", "SIPI", "NDRE", "MTCI"),
  crop_type = "soybeans",
  analysis_type_detail = "comprehensive",
  auto_detect_bands = TRUE,
  parallel = TRUE,
  visualization_config = list(
    create_individual_maps = TRUE,
    create_composite_map = TRUE,
    interactive_comparison = TRUE
  ),
  output_folder = "results/vegetation_comprehensive/"
)

# Execute workflow
vegetation_results <- run_comprehensive_geospatial_workflow(vegetation_config)
```

### 3. Water Quality Analysis Workflow

Environmental monitoring with spatial analysis:

```{r}
# Configure water quality analysis
water_config <- list(
  analysis_type = "water_quality_analysis",
  input_data = "monitoring_data/water_stations.csv",
  variable = "nitrate_nitrite", 
  region_boundary = "Ohio",
  river_network = "spatial_data/ohio_rivers.geojson",
  thresholds = list(
    Normal = c(0, 4),
    Elevated = c(4, 7), 
    High = c(7, 10),
    Critical = c(10, Inf)
  ),
  visualization_config = list(
    interactive_map = TRUE,
    basemap = "terrain",
    cluster_points = TRUE
  ),
  output_folder = "results/water_quality/"
)

# Execute workflow
water_results <- run_comprehensive_geospatial_workflow(water_config)
```

### 4. Terrain Analysis Workflow

Advanced terrain analysis with multiple metrics:

```{r}
# Configure terrain analysis
terrain_config <- list(
  analysis_type = "terrain_analysis",
  input_data = "elevation_data/dem.tif",
  region_boundary = c(-84.5, 39.0, -82.0, 41.0),  # Bounding box
  terrain_vars = c("slope", "aspect", "TRI", "TPI", "flowdir", "roughness"),
  advanced_metrics = c("wetness_index", "curvature", "heat_load"),
  vector_data = "study_sites/field_locations.shp",
  extraction_method = "buffer",
  buffer_size = 500,
  output_folder = "results/terrain_analysis/"
)

# Execute workflow
terrain_results <- run_comprehensive_geospatial_workflow(terrain_config)
```

### 5. Temporal Analysis Workflow

Time series analysis and change detection:

```{r}
# Configure temporal analysis
temporal_config <- list(
  analysis_type = "temporal_analysis",
  input_data = "time_series/landcover/",
  dates = c("2020", "2021", "2022", "2023"),
  region_boundary = "Michigan",
  temporal_method = "trend",
  change_detection = TRUE,
  seasonal_analysis = TRUE,
  visualization_config = list(
    create_trend_maps = TRUE,
    create_change_maps = TRUE,
    animation = TRUE
  ),
  output_folder = "results/temporal_analysis/"
)

# Execute workflow
temporal_results <- run_comprehensive_geospatial_workflow(temporal_config)
```

### 6. Interactive Mapping Workflow

Multi-layer interactive visualization:

```{r}
# Configure interactive mapping
interactive_config <- list(
  analysis_type = "interactive_mapping",
  input_data = list(
    elevation = "terrain/dem.tif",
    vegetation = "satellite/ndvi.tif",
    water_quality = "monitoring/stations.shp",
    land_use = "classification/landuse.tif"
  ),
  region_boundary = "Indiana",
  basemap = "satellite",
  layer_controls = TRUE,
  popup_config = list(
    water_quality = c("station_id", "date", "value", "status")
  ),
  output_folder = "results/interactive_maps/"
)

# Execute workflow
interactive_results <- run_comprehensive_geospatial_workflow(interactive_config)
```

## Enhanced Workflow Functions

### Enhanced NDVI Crop Workflow

Specialized function for detailed NDVI analysis:

```{r}
# Direct workflow execution
enhanced_ndvi <- run_enhanced_ndvi_crop_workflow(
  config = list(
    red_data = "red_bands/",
    nir_data = "nir_bands/",
    region_boundary = "Iowa",
    cdl_data = "cdl_2023.tif",
    crop_codes = get_comprehensive_cdl_codes("soybeans"),
    indices = c("NDVI", "EVI", "SAVI", "PRI"),
    quality_filter = TRUE,
    temporal_smoothing = TRUE,
    visualization_config = list(
      interactive = TRUE,
      animation = TRUE,
      comparison_maps = TRUE
    )
  ),
  output_folder = "enhanced_ndvi_results/"
)
```

### Comprehensive Vegetation Workflow

Detailed vegetation analysis with 40+ indices:

```{r}
# Advanced vegetation workflow
vegetation_workflow <- run_comprehensive_vegetation_workflow(
  config = list(
    input_data = "hyperspectral_data.tif",
    region_boundary = "study_area.shp",
    indices = c("NDVI", "EVI", "SAVI", "PRI", "SIPI", "NDRE", "MTCI", 
               "CRI1", "ARI1", "PSRI", "IRECI", "S2REP"),
    crop_type = "wheat",
    analysis_type = "stress",
    growth_stage = "reproductive",
    parallel = TRUE
  ),
  output_folder = "comprehensive_vegetation/"
)
```

## Multi-Dataset Integration Workflows

### Environmental Data Integration

Combine multiple environmental datasets:

```{r}
# Multi-dataset integration workflow
integration_config <- list(
  analysis_type = "multi_dataset_integration", 
  vector_data = "study_sites/monitoring_locations.csv",
  raster_datasets = list(
    vegetation = "satellite/ndvi_time_series/",
    soil_nitrogen = "soil_data/nitrogen.tif",
    soil_carbon = "soil_data/carbon.tif",
    elevation = "terrain/dem.tif",
    slope = "terrain/slope.tif",
    precipitation = "climate/annual_precip.tif",
    temperature = "climate/mean_temp.tif",
    land_cover = "classification/land_cover.tif"
  ),
  analysis_functions = list(
    mean = function(x) mean(x, na.rm = TRUE),
    median = function(x) median(x, na.rm = TRUE),
    cv = function(x) sd(x, na.rm = TRUE) / mean(x, na.rm = TRUE),
    percentile_90 = function(x) quantile(x, 0.9, na.rm = TRUE)
  ),
  region_boundary = "watershed_boundary.shp",
  extraction_method = "buffer",
  buffer_size = 1000,
  output_folder = "multi_dataset_integration/"
)

# Execute integration workflow
integration_results <- run_comprehensive_geospatial_workflow(integration_config)
```

## Workflow Results Structure

### Understanding Results

All workflows return standardized result structures:

```{r}
# Workflow results contain:
str(workflow_results)
# $results - main analysis outputs
# $summary - analysis summary and statistics  
# $output_folder - location of saved files
# $config - original configuration
# $visualizations - created maps and plots
```

### Accessing Results

```{r}
# Access specific workflow outputs
vegetation_indices <- vegetation_results$results$vegetation_analysis$vegetation_indices
crop_statistics <- vegetation_results$results$statistics
created_maps <- vegetation_results$visualizations

# Summary information
print(vegetation_results$summary)
```

### Saved Outputs

Workflows automatically save multiple output types:

```{r}
# Typical outputs include:
# - analysis_results.rds (R data objects)
# - processed_data.csv (tabular results)
# - maps/ (visualization outputs)
# - raster_outputs/ (processed raster files)
# - analysis_summary.html (comprehensive report)
```

## Configuration Best Practices

### 1. Structured Configuration

```{r}
# Use well-structured configuration lists
base_config <- list(
  # Required fields
  analysis_type = "vegetation_comprehensive",
  input_data = "data_path",
  region_boundary = "Ohio",
  
  # Analysis parameters
  indices = c("NDVI", "EVI", "SAVI"),
  quality_control = TRUE,
  
  # Visualization options
  visualization_config = list(
    create_maps = TRUE,
    interactive = FALSE,
    color_scheme = "viridis"
  ),
  
  # Output settings
  output_folder = "results/",
  save_intermediate = TRUE
)
```

### 2. Reusable Configurations

```{r}
# Save configurations for reuse
saveRDS(ndvi_config, "configs/standard_ndvi_config.rds")

# Load and modify existing configurations
base_config <- readRDS("configs/base_config.rds")
modified_config <- base_config
modified_config$region_boundary <- "Michigan"
modified_config$output_folder <- "michigan_analysis/"
```

### 3. Batch Processing

```{r}
# Process multiple regions with same analysis
regions <- c("Ohio", "Indiana", "Illinois", "Michigan")

results_list <- list()
for (region in regions) {
  region_config <- base_config
  region_config$region_boundary <- region
  region_config$output_folder <- paste0("results/", tolower(region), "/")
  
  results_list[[region]] <- run_comprehensive_geospatial_workflow(region_config)
}
```

## Advanced Workflow Customization

### Custom Analysis Functions

```{r}
# Define custom analysis functions
custom_functions <- list(
  vegetation_stress_index = function(ndvi, evi, pri) {
    # Custom stress calculation
    stress_score <- (1 - ndvi) + (1 - evi) + abs(pri)
    return(stress_score / 3)
  },
  
  soil_productivity_index = function(nitrogen, carbon, ph) {
    # Custom productivity calculation
    productivity <- (nitrogen * carbon) / (abs(ph - 6.5) + 1)
    return(productivity)
  }
)

# Include in workflow configuration
custom_config <- base_config
custom_config$custom_functions <- custom_functions
```

### Conditional Processing

```{r}
# Conditional analysis based on data availability
adaptive_config <- list(
  analysis_type = "vegetation_comprehensive",
  input_data = "satellite_data/",
  region_boundary = "Ohio",
  
  # Conditional processing
  quality_filter = file.exists("quality_masks/"),
  temporal_smoothing = length(list.files("satellite_data/")) > 5,
  
  # Adaptive visualization
  visualization_config = list(
    interactive = requireNamespace("leaflet", quietly = TRUE),
    animation = requireNamespace("gganimate", quietly = TRUE)
  )
)
```

## Workflow Monitoring and Validation

### Progress Tracking

```{r}
# Monitor workflow progress
workflow_with_monitoring <- function(config) {
  start_time <- Sys.time()
  
  cat("Starting workflow:", config$analysis_type, "\n")
  cat("Region:", config$region_boundary, "\n")
  cat("Start time:", format(start_time), "\n\n")
  
  # Execute workflow
  results <- run_comprehensive_geospatial_workflow(config)
  
  end_time <- Sys.time()
  duration <- difftime(end_time, start_time, units = "mins")
  
  cat("\nWorkflow completed!\n")
  cat("Duration:", round(duration, 2), "minutes\n")
  cat("Output folder:", results$output_folder, "\n")
  
  return(results)
}
```

### Results Validation

```{r}
# Validate workflow results
validate_workflow_results <- function(results) {
  validation_report <- list()
  
  # Check data completeness
  if (!is.null(results$results$vegetation_data)) {
    n_layers <- terra::nlyr(results$results$vegetation_data)
    validation_report$vegetation_layers <- n_layers
  }
  
  # Check visualization outputs
  if (!is.null(results$visualizations)) {
    validation_report$visualizations_created <- length(results$visualizations)
  }
  
  # Check file outputs
  if (dir.exists(results$output_folder)) {
    output_files <- list.files(results$output_folder, recursive = TRUE)
    validation_report$output_files_count <- length(output_files)
  }
  
  return(validation_report)
}

# Use validation
validation_results <- validate_workflow_results(workflow_results)
print(validation_results)
```

## Troubleshooting Workflows

### Common Issues and Solutions

```{r}
# Issue 1: Memory problems with large datasets
# Solution: Use sampling or chunking
large_data_config <- base_config
large_data_config$processing_options <- list(
  chunk_size = 1000000,  # Process in chunks
  use_sampling = TRUE,   # Sample large rasters
  parallel = FALSE       # Avoid memory overhead
)

# Issue 2: Missing dependencies
# Solution: Check and install required packages
check_workflow_dependencies <- function(config) {
  required_packages <- c("terra", "sf", "ggplot2", "dplyr")
  
  if (config$visualization_config$interactive) {
    required_packages <- c(required_packages, "leaflet")
  }
  
  missing <- required_packages[!sapply(required_packages, requireNamespace, quietly = TRUE)]
  
  if (length(missing) > 0) {
    cat("Missing required packages:", paste(missing, collapse = ", "), "\n")
    cat("Install with: install.packages(c('", paste(missing, collapse = "', '"), "'))\n")
    return(FALSE)
  }
  
  return(TRUE)
}

# Issue 3: Configuration errors
# Solution: Validate configuration before execution
validate_config <- function(config) {
  required_fields <- c("analysis_type", "input_data", "region_boundary")
  missing_fields <- setdiff(required_fields, names(config))
  
  if (length(missing_fields) > 0) {
    stop("Missing required configuration fields: ", 
         paste(missing_fields, collapse = ", "))
  }
  
  return(TRUE)
}
```

The comprehensive workflow system in GeoSpatialSuite provides end-to-end solutions for complex geospatial analysis tasks, combining data processing, analysis, and visualization into reproducible, configurable workflows suitable for research and operational applications.
